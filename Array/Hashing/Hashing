🔍✨ Hashing (HashMap / HashSet) Pattern
📘 What is Hashing?
Hashing helps you store and find data fast using keys — like a magical dictionary! 🪄
You use a HashMap or HashSet to quickly check:

✅ If a number exists

🧮 How many times it occurs

🎯 If two numbers add up to a target

🧩 Why Use Hashing?
✅ Fast lookup in O(1) time
✅ Store frequencies or indexes
✅ Detect duplicates or missing elements
✅ Used in: Two Sum, Frequency count, Longest subarrays, Anagrams

💡 Real-Life Analogy:
Think of HashMap as a magical cabinet 🗄️
You can write a label (key) and quickly find its contents (value)! 🔑

✅ Common HashMap Use Cases:
Problem Type	Use HashMap to…
Frequency Count	Track how many times something appears
Two Sum / Complements	Track previous values & their positions
Detect Duplicates	Use HashSet for fast existence check
Longest Streaks / Windows	Store last index / counts
Anagrams	Compare frequency maps

 Common HashMap Use Cases with Examples
1️⃣ Frequency Count
📌 Count how many times elements appear in an array.

🧪 Example:

text
Copy
Edit
Input: [1, 1, 2, 3, 3, 3]
Output: {1=2, 2=1, 3=3}
👨‍💻 Java Code:

java
Copy
Edit
Map<Integer, Integer> freq = new HashMap<>();
for (int num : arr) {
    freq.put(num, freq.getOrDefault(num, 0) + 1);
}
System.out.println(freq);  // Output: {1=2, 2=1, 3=3}
🔗 LeetCode: First Unique Character in a String – #387

2️⃣ Two Sum / Complements
🎯 Find two numbers that add up to a target sum.

🧪 Example:

text
Copy
Edit
Input: [2, 7, 11, 15], Target = 9
Output: [0, 1]  // Because 2 + 7 = 9
👨‍💻 Java Code:

java
Copy
Edit
Map<Integer, Integer> map = new HashMap<>();
for (int i = 0; i < nums.length; i++) {
    int diff = target - nums[i];
    if (map.containsKey(diff)) {
        return new int[] { map.get(diff), i };
    }
    map.put(nums[i], i);
}
🔗 LeetCode: Two Sum – #1

3️⃣ Detect Duplicates
🔁 Check if any element appears more than once.

🧪 Example:

text
Copy
Edit
Input: [1, 2, 3, 1]
Output: true
👨‍💻 Java Code:

java
Copy
Edit
Set<Integer> seen = new HashSet<>();
for (int num : nums) {
    if (seen.contains(num)) return true;
    seen.add(num);
}
return false;
🔗 LeetCode: Contains Duplicate – #217

4️⃣ Longest Streak / Subarray / Window
🔒 Track last seen index to prevent repeats.

🧪 Example:

Find longest substring without repeating characters.

text
Copy
Edit
Input: "abcabcbb"
Output: 3  // "abc"
👨‍💻 Java Code:

java
Copy
Edit
Map<Character, Integer> map = new HashMap<>();
int left = 0, maxLen = 0;

for (int right = 0; right < s.length(); right++) {
    char c = s.charAt(right);
    if (map.containsKey(c)) {
        left = Math.max(left, map.get(c) + 1);
    }
    map.put(c, right);
    maxLen = Math.max(maxLen, right - left + 1);
}
🔗 LeetCode: Longest Substring Without Repeating Characters – #3

5️⃣ Anagrams
🧠 Group or compare strings with the same characters in any order.

🧪 Example:
Input: ["eat", "tea", "tan", "ate", "nat", "bat"]
Output: [["eat","tea","ate"],["tan","nat"],["bat"]]

👨‍💻 Java Code:

java
Copy
Edit
Map<String, List<String>> map = new HashMap<>();

for (String word : strs) {
    char[] chars = word.toCharArray();
    Arrays.sort(chars);
    String key = new String(chars);

    map.computeIfAbsent(key, k -> new ArrayList<>()).add(word);
}
return new ArrayList<>(map.values());
🔗 LeetCode: Group Anagrams – #49

✅ Summary Table (with Examples)
🧩 Use Case	🔍 Use HashMap to…	🧪 Example Problem
Frequency Count	Count how many times values occur	#387 First Unique Char
Two Sum / Complements	Track complements to reach a target	#1 Two Sum
Detect Duplicates	Fast lookup using HashSet	#217 Contains Duplicate
Longest Streak / Window	Track last seen index / substring bounds	#3 Longest Substring w/o Repeat
Anagrams / Grouping	Group strings by sorted characters	#49 Group Anagrams


